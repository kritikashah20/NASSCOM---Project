###############Linear regression###############
x=c(151,170,138,189,118,179,135,164)
###############Linear regression###############
x=c(151,170,138,189,118,179,135,164)
y=c(51,70,30,80,50,75,35,64)
plot(x,y)
d=lm(y~x)   ###linear model y is linear dependent on x
d
summary(d)
a=data.frame(x=c(156,132))
names(a)
result=predict(d,a)
print(result)
plot(x,y,col="blue",main="Ht Wt Regressio",abline(lm(y~x)),cex=1.3,pch=16,xlab="Ht",ylab="Wt")
print(y)
print(x)
anova(d)
#############Logistic Regression###################################################
data(mtcars)
#############Logistic Regression###################################################
data(mtcars)
fix(mtcars)
model=glm(formula = vs~wt+disp,data=mtcars,family="binomial")
newdata=data.frame(wt=2.310,disp=210)
predict(model,newdata)
?glm
model=glm(formula = vs~wt+disp,data=mtcars,family="binomial")
newdata=data.frame(wt=2.310,disp=210)
predict(model,newdata)
anova(model)
plot(x,y,col="blue",main="Ht Wt Regressio",abline(lm(y~x)),cex=1.3,pch=16,xlab="Ht",ylab="Wt")
install.packages("gtrendsR")
install.packages("gtrendsR")
ls("package:gtrendsR")
ls("package:gtrendsR")
install.packages("gtrendsR")
ls("package:gtrendsR")
library(gtrendsR)
trend=gtrends(c("BJP","Congress"))
trend
plot(trend)
plot(trend,type="region")
plot(trend,type="cities")
google_trends=gtrends(c("BJP"),gprop = "web", time="all")
plot(google_trends)
google_trends=gtrends(c("BJP","Congress"),geo="IN",gprop = "web", time="now 1 -d")
google_trends=gtrends(c("BJP","Congress"),geo="IN",gprop = "web", time="2010-01-01 2018-08-27")
google_trends=gtrends(c("BJP","Congress"),geo="IN",gprop = "web", time="2010-01-01 2018-08-27")
google_trends=gtrends(c("BJP","Congress"),geo="IN",gprop = "web", time="now 1-d")
library(help=datasets)
library(help=datasets)
dim(iris)
names(iris)
iris1=iris
head(iris1)
iris1$Species=NULL #to remove species column from the dataset since it is categorized
head(iris1)
result=kmeans(iris1,3)
result
plot(iris1,col=result$cluster)
plot(iris1[c("Petal.Length","Petal.Width")],col=result$cluster)
plot(iris[c("Petal.Length","Petal.Width")],col=result$cluster)
names(result)
head(result$centers)
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
fix(Smarket)
cor(Smarket)
cor(Smarket[, -9])
attach(Smarket)
plot(Volume
plot(Volume)
plot(Volume)
train <- (Year < 2005)
Smarket.2005 <- Smarket[!train, ]
dim(Smarket.2005)
Direction.2005 <- Direction[!train]
library(class)
train.X <- cbind(Lag1,Lag2)[train, ]
test.X <- cbind(Lag1, Lag2)[!train, ]
train.Direction <- Direction[train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
table(knn.pred, Direction.2005)
# My first program in R Programming
myString <- "Hello, World!"
print (myString)
# Multiline comment trick
if(FALSE) {
"This is a demo for multi-line comments and it should be put inside either a
single OR double quote"
}
# To print variables with dot(.)
print(ls(all.name = TRUE))
library(knitr)
install.packages("knitr")
library(knitr)
opts_chunk$set(comment = "")
library(readr)
suppressPackageStartupMessages(library(dplyr))
install.packages("dplyr")
suppressPackageStartupMessages(library(dplyr))
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
x = c(1, 4, 2, 8, 10)
x[2]
## -----------------------------------------------------------------------------
library(dplyr)
nth(x, n = 2)
## -----------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ---- error=TRUE--------------------------------------------------------------
nth(x, n = c(2, 5)) # nth only returns one number
## ---- error=TRUE--------------------------------------------------------------
nth(x, n = c(2, 5)) # nth only returns one number
## ----negativeIndex------------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2-----------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## -----------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## -----------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## -----------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## -----------------------------------------------------------------------------
x = c(0, NA, 2, 3, 4, -0.5, 0.2)
x > 2
## -----------------------------------------------------------------------------
x != NA
x > 2 & !is.na(x)
## -----------------------------------------------------------------------------
(x == 0 | x == 2) # has NA
(x == 0 | x == 2) & !is.na(x) # No NA
y <- c(1, NA ,3 ,4)
y
y.drop_na()
y
tidyr::drop_na()
y
tidyr::drop_na_(y)
y
tidyr::drop_na_(y)
y
y.dropna()
y
y.dropna()
y
#Sal = jhur::read_salaries() # or
library(readr)
Sal = read_csv("https://johnmuschelli.com/intro_to_r/data/Baltimore_City_Employee_Salaries_FY2015.csv")
Sal = rename(Sal, Name = name)
Sal
any(is.na(Sal$name))
# Recoding Variables
data_new = read_csv("C:\\Harsha\\VIT\\Fall20202021\\Analytics\\code\\new\\Credit.csv")
data_new
library(dplyr)
data_new = data_new %>%
mutate(Gender = recode(Gender, M = "Male", m = "Male", male = "Male"))
data_new
# Splitting/Find/Replace and Regular Expressions
# The stringr package
# ?modifiers
#fixed - match everything exactly
#regex - default - uses regular expressions
#ignore_case is an option to not have to use tolower
library(stringr)
x <- c("I really", "like writing", "R code programs")
y <- str_split(x, " ") # returns a list
y
# Substring and String Splitting
# Separating columns based on a separator
library(tidyr)
df = tibble(x = c("I really", "like writing", "R code programs"))
df
df %>% separate(x, into = c("first", "second", "third"))
df
# ‘Find’ functions: stringr
head(str_detect(Sal$name, "Rawlings"))
head(str_detect(Sal$name, "Aaron"))
head(str_detect(Sal$AgencyID, "A03031"))
which(str_detect(Sal$name, "Rawlings"))
# str_extract extracts just the matched string
ss = str_extract(Sal$name, "Aaron")
head(ss)
str_subset(Sal$name, "Rawlings")
Sal %>% filter(str_detect(name, "Rawlings"))
# Using Regular Expressions
#Look for any name that starts with:
# Payne at the beginning,
# Leonard and then an S
# Spence then capital C
head(str_subset( Sal$name, "^Payne.*"), 3)
head(str_subset( Sal$name, "Leonard.?S"))
head(str_subset( Sal$name, "Spence.*C.*"))
# str_extract_all extracts all the matched strings
head(str_extract(Sal$AgencyID, "\\d"))
# replace
# head(str_replace(Sal$Name, "a", "j"))
# Replacing and substituting
# Sal = Sal %>% mutate(
# AnnualSalary = str_replace(AnnualSalary, fixed("$"), ""),
# AnnualSalary = as.numeric(AnnualSalary)
# ) %>%
# arrange(desc(AnnualSalary))
# Pasting strings with paste and paste0
paste("Visit", 1:5, sep = "_")
paste("To", "is going be the ", "we go to the store!", sep = "day ")
# Useful String Functions
# toupper(), tolower()
greeting <- "Good day!"
GREETING <- toupper(greeting)
print(GREETING)
# str_trim() from stringr package
bad_text <- c("This", " example ", "has several   ", "   whitespaces ")
bad_text
str_trim(bad_text, side = "left")
str_trim(bad_text, side = "right")
str_trim(bad_text, side = "both")
# nchar
text <- c("one", "two", "three", NA, "five")
nchar(text)
# Sorting characters
sort(c("1", "2", "10"))
order(c("1", "2", "10"))
x = rnorm(10)
x
x[1] = x[2] # create a tie
rank(x)
# Useful String Functions
# toupper(), tolower()
greeting <- "Good day!"
GREETING <- toupper(greeting)
print(GREETING)
# str_trim() from stringr package
bad_text <- c("This", " example ", "has several   ", "   whitespaces ")
bad_text
str_trim(bad_text, side = "left")
str_trim(bad_text, side = "right")
str_trim(bad_text, side = "both")
# nchar
text <- c("one", "two", "three", NA, "five")
nchar(text)
# Sorting characters
sort(c("1", "2", "10"))
order(c("1", "2", "10"))
x = rnorm(10)
x
x[1] = x[2] # create a tie
rank(x)
GReeting <- tolower(greeting)
print(GReeting)
# str_trim() from stringr package
bad_text <- c("This", " example ", "has several   ", "   whitespaces ")
bad_text
str_trim(bad_text, side = "left")
str_trim(bad_text, side = "both")
# Sorting characters
sort(c("1", "2", "10"))
order(c("1", "2", "10"))
x = rnorm(10)
x
x[1] = x[2] # create a tie
rank(x)
res <- cor(x, y)
pdata <- read.csv('parkinsons.data')
setwd("G:/3rd year stuffs/NASSCOM Futureskills- Data Analyst/Project")
pdata <- read.csv('parkinsons.data')
print(is.data.frame(pdata))
print(pdata)
print(ncol(pdata))
print(nrow(pdata))
str(pdata)
any(is.na(pdata))
attach(pdata)
x = matrix(c(pdata$MDVP.Fo.Hz., pdata$MDVP.Fhi.Hz., pdata$MDVP.Flo.Hz., pdata$MDVP.Jitter..., pdata$MDVP.Jitter.Abs., pdata$MDVP.RAP, pdata$MDVP.PPQ, pdata$Jitter.DDP, pdata$MDVP.Shimmer, pdata$MDVP.Shimmer.dB., pdata$Shimmer.APQ3, pdata$Shimmer.APQ5, pdata$MDVP.APQ, pdata$Shimmer.DDA, pdata$NHR, pdata$HNR, pdata$RPDE, pdata$DFA, pdata$spread1, pdata$spread2, pdata$D2, pdata$PPE), nrow = 195)
colnames(x) <- c("MDVP.Fo.Hz.", "MDVP.Fhi.Hz.", "MDVP.Flo.Hz.", "MDVP.Jitter...", "MDVP.Jitter.Abs.", "MDVP.RAP", "MDVP.PPQ", "Jitter.DDP", "MDVP.Shimmer", "MDVP.Shimmer.dB.", "Shimmer.APQ3", "Shimmer.APQ5", "MDVP.APQ", "Shimmer.DDA", "NHR", "HNR", "RPDE", "DFA", "spread1", "spread2", "D2", "PPE" )
x
y = matrix(c(pdata$status))
colnames(y) <- c("status")
y
res <- cor(x, y)
sort(res, decreasing = TRUE, index.return = TRUE)
cor.test(x, y)
print(ncol(pdata))
for( a in y)
{
if(a == 1)
{
p_sum_ppe = p_sum_ppe + pdata$PPE
}
}
p_sum_ppe = 0
for( a in y)
{
if(a == 1)
{
p_sum_ppe = p_sum_ppe + pdata$PPE
}
}
p_sum_ppe
install.packages("caret")
library(datasets)
library(RColorBrewer)
coul <- brewer.pal(5, "Set2")
aData<-read.csv('AllData.csv')
str(pdata)
